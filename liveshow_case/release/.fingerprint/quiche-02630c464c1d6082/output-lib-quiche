{"message":"unused import: `crate::scheduler`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/stream.rs","byte_start":1770,"byte_end":1786,"line_start":45,"line_end":45,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"use crate::scheduler;","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/stream.rs","byte_start":1766,"byte_end":1787,"line_start":45,"line_end":45,"column_start":1,"column_end":22,"is_primary":true,"text":[{"text":"use crate::scheduler;","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::scheduler`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/stream.rs:45:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::scheduler;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unreachable pattern","code":{"code":"unreachable_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/scheduler/mod.rs","byte_start":2324,"byte_end":2325,"line_start":81,"line_end":81,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        _ => {","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unreachable_patterns)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable pattern\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/scheduler/mod.rs:81:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        _ => {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unreachable_patterns)]` on by default\u001b[0m\n\n"}
{"message":"missing documentation for an associated function","code":{"code":"missing_docs","explanation":null},"level":"warning","spans":[{"file_name":"src/h3/mod.rs","byte_start":22097,"byte_end":22519,"line_start":653,"line_end":664,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn send_request_full(","highlight_start":5,"highlight_end":30},{"text":"        &mut self, conn: &mut super::Connection, headers: &[Header], fin: bool,","highlight_start":1,"highlight_end":80},{"text":"        deadline: u64,","highlight_start":1,"highlight_end":23},{"text":"    ) -> Result<u64> {","highlight_start":1,"highlight_end":23},{"text":"        let stream_id = self.get_available_request_stream()?;","highlight_start":1,"highlight_end":62},{"text":"        self.streams","highlight_start":1,"highlight_end":21},{"text":"            .insert(stream_id, stream::Stream::new(stream_id, true));","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        self.send_headers(conn, stream_id, headers, fin, deadline)?;","highlight_start":1,"highlight_end":69},{"text":"        // deadline","highlight_start":1,"highlight_end":20},{"text":"        Ok(stream_id)","highlight_start":1,"highlight_end":22},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"src/lib.rs","byte_start":9465,"byte_end":9477,"line_start":263,"line_end":263,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"#![warn(missing_docs)]","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for an associated function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/h3/mod.rs:653:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m653\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn send_request_full(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m654\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &mut self, conn: &mut super::Connection, headers: &[Header], fin: bool,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m655\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        deadline: u64,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m656\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Result<u64> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m663\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(stream_id)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m664\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:263:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m263\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#![warn(missing_docs)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"missing documentation for an associated function","code":{"code":"missing_docs","explanation":null},"level":"warning","spans":[{"file_name":"src/h3/mod.rs","byte_start":22810,"byte_end":23068,"line_start":674,"line_end":681,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn send_response_full(","highlight_start":5,"highlight_end":31},{"text":"        &mut self, conn: &mut super::Connection, stream_id: u64,","highlight_start":1,"highlight_end":65},{"text":"        headers: &[Header], fin: bool, deadline: u64,","highlight_start":1,"highlight_end":54},{"text":"    ) -> Result<()> {","highlight_start":1,"highlight_end":22},{"text":"        self.send_headers(conn, stream_id, headers, fin, deadline)?;","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Ok(())","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for an associated function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/h3/mod.rs:674:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m674\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn send_response_full(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m675\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &mut self, conn: &mut super::Connection, stream_id: u64,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m676\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        headers: &[Header], fin: bool, deadline: u64,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m677\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Result<()> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m680\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m681\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\n"}
{"message":"missing documentation for an associated function","code":{"code":"missing_docs","explanation":null},"level":"warning","spans":[{"file_name":"src/h3/mod.rs","byte_start":25337,"byte_end":27631,"line_start":764,"line_end":836,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn send_body_full(","highlight_start":5,"highlight_end":27},{"text":"        &mut self, conn: &mut super::Connection, stream_id: u64, body: &[u8],","highlight_start":1,"highlight_end":78},{"text":"        fin: bool, deadline: u64,","highlight_start":1,"highlight_end":34},{"text":"    ) -> Result<usize> {","highlight_start":1,"highlight_end":25},{"text":"        let mut d = [42; 10];","highlight_start":1,"highlight_end":30},{"text":"        let mut b = octets::Octets::with_slice(&mut d);","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Validate that it is sane to send data on the stream.","highlight_start":1,"highlight_end":64},{"text":"        if !self.streams.contains_key(&stream_id) || stream_id % 4 != 0 {","highlight_start":1,"highlight_end":74},{"text":"            return Err(Error::FrameUnexpected);","highlight_start":1,"highlight_end":48},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let overhead = octets::varint_len(frame::DATA_FRAME_TYPE_ID) +","highlight_start":1,"highlight_end":71},{"text":"            octets::varint_len(body.len() as u64);","highlight_start":1,"highlight_end":51},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let stream_cap = conn.stream_capacity(stream_id)?;","highlight_start":1,"highlight_end":59},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Make sure there is enough capacity to send the frame header and at","highlight_start":1,"highlight_end":78},{"text":"        // least one byte of frame payload (this to avoid sending 0-length DATA","highlight_start":1,"highlight_end":80},{"text":"        // frames).","highlight_start":1,"highlight_end":20},{"text":"        if stream_cap <= overhead {","highlight_start":1,"highlight_end":36},{"text":"            return Err(Error::Done);","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Cap the frame payload length to the stream's capacity.","highlight_start":1,"highlight_end":66},{"text":"        let body_len = std::cmp::min(body.len(), stream_cap - overhead);","highlight_start":1,"highlight_end":73},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // If we can't send the entire body, set the fin flag to false so the","highlight_start":1,"highlight_end":78},{"text":"        // application can try again later.","highlight_start":1,"highlight_end":44},{"text":"        let fin = if body_len != body.len() { false } else { fin };","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        trace!(","highlight_start":1,"highlight_end":16},{"text":"            \"{} tx frm DATA stream={} len={} fin={}\",","highlight_start":1,"highlight_end":54},{"text":"            conn.trace_id(),","highlight_start":1,"highlight_end":29},{"text":"            stream_id,","highlight_start":1,"highlight_end":23},{"text":"            body_len,","highlight_start":1,"highlight_end":22},{"text":"            fin","highlight_start":1,"highlight_end":16},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        conn.stream_send_full(","highlight_start":1,"highlight_end":31},{"text":"            stream_id,","highlight_start":1,"highlight_end":23},{"text":"            b.put_varint(frame::DATA_FRAME_TYPE_ID)?,","highlight_start":1,"highlight_end":54},{"text":"            false,","highlight_start":1,"highlight_end":19},{"text":"            deadline,","highlight_start":1,"highlight_end":22},{"text":"            super::stream::DEFAULT_PRIORITY,","highlight_start":1,"highlight_end":45},{"text":"            stream_id,","highlight_start":1,"highlight_end":23},{"text":"        )?;","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        conn.stream_send_full(","highlight_start":1,"highlight_end":31},{"text":"            stream_id,","highlight_start":1,"highlight_end":23},{"text":"            b.put_varint(body_len as u64)?,","highlight_start":1,"highlight_end":44},{"text":"            false,","highlight_start":1,"highlight_end":19},{"text":"            deadline,","highlight_start":1,"highlight_end":22},{"text":"            super::stream::DEFAULT_PRIORITY,","highlight_start":1,"highlight_end":45},{"text":"            stream_id,","highlight_start":1,"highlight_end":23},{"text":"        )?;","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Return how many bytes were written, excluding the frame header.","highlight_start":1,"highlight_end":75},{"text":"        let written = conn.stream_send_full(","highlight_start":1,"highlight_end":45},{"text":"            stream_id,","highlight_start":1,"highlight_end":23},{"text":"            &body[..body_len],","highlight_start":1,"highlight_end":31},{"text":"            fin,","highlight_start":1,"highlight_end":17},{"text":"            deadline,","highlight_start":1,"highlight_end":22},{"text":"            super::stream::DEFAULT_PRIORITY,","highlight_start":1,"highlight_end":45},{"text":"            stream_id,","highlight_start":1,"highlight_end":23},{"text":"        )?;","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if fin && written == body.len() && conn.stream_finished(stream_id) {","highlight_start":1,"highlight_end":77},{"text":"            self.streams.remove(&stream_id);","highlight_start":1,"highlight_end":45},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Ok(written)","highlight_start":1,"highlight_end":20},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for an associated function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/h3/mod.rs:764:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m764\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn send_body_full(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m765\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &mut self, conn: &mut super::Connection, stream_id: u64, body: &[u8],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m766\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fin: bool, deadline: u64,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m767\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Result<usize> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m835\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(written)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m836\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\n"}
{"message":"5 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 5 warnings emitted\u001b[0m\n\n"}
